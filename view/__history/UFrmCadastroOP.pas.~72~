unit UFrmCadastroOP;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, UFrmCadastroPai, RzButton, ComCtrls, RzDTP, StdCtrls, Mask, RzEdit,
  RzLabel, Grids, DBGrids, RzDBGrid, ExtCtrls, RzPanel, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit, dxSkinsCore,
  dxSkinsDefaultPainters, cxLabel, dxSkinBlack, dxSkinBlue, dxSkinCaramel,
  dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide, dxSkinFoggy, dxSkinGlassOceans,
  dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky, dxSkinLondonLiquidSky,
  dxSkinMcSkin, dxSkinMoneyTwins, dxSkinOffice2007Black, dxSkinOffice2007Blue,
  dxSkinOffice2007Green, dxSkinOffice2007Pink, dxSkinOffice2007Silver,
  dxSkinOffice2010Black, dxSkinOffice2010Blue, dxSkinOffice2010Silver,
  dxSkinPumpkin, dxSkinSeven, dxSkinSharp, dxSkinSilver, dxSkinSpringTime,
  dxSkinStardust, dxSkinSummer2008, dxSkinValentine, dxSkinXmas2008Blue,
  dxSkinsForm, RzGrids, UReceita, UFrmconsultarReceita, UFrmConsultarFuncionario,
  UFrmConsultarProduto, UOrdemProducao, UCtrlOrdemProducao, UCtrlFuncionario, UCtrlProduto,
  UCtrlReceita;

type
  TFrmCadastroOP = class(TFormCadastroPai)
    TEdtFuncionario: TRzExpandEdit;
    TLblNumOP: TRzLabel;
    TEdtNumeroOP: TRzEdit;
    TDateTimeDtEmicao: TRzDateTimePicker;
    TLblDataEmicao: TRzLabel;
    TLblReceita: TRzLabel;
    TEdtReceita: TRzEdit;
    TBtnBuscarReceita: TRzButton;
    TLblCustoMtP: TRzLabel;
    TEdtCustoMtP: TRzEdit;
    TGroupBoxMateriaProducao: TRzGroupBox;
    TLblOutrasDespesas: TRzLabel;
    TEdtOutrasDespesas: TRzEdit;
    TLblvalorTotalOP: TRzLabel;
    TEdtValorTotalOP: TRzEdit;
    TLblFuncionario: TRzLabel;
    TBtnBuscarFuncionario: TRzButton;
    TEdtObservacoe: TRzEdit;
    TLblObservacoes: TRzLabel;
    TLblIdFuncionario: TRzLabel;
    TEdtIdFuncionario: TRzEdit;
    TLblIDReceita: TRzLabel;
    TEdtIdReceita: TRzEdit;
    RzLabel1: TRzLabel;
    TEdtQtdeReceita: TRzEdit;
    TStringGridProdutoReceita: TRzStringGrid;
    RzBitBtn1: TRzBitBtn;
    RzBitBtn2: TRzBitBtn;
    RzBitBtn3: TRzBitBtn;
    TEdtIdProduto: TRzEdit;
    TEdtProduto: TRzEdit;
    TEdtMarca: TRzEdit;
    TEdtQtdeProduto: TRzEdit;
    TLblIDProduro: TRzLabel;
    TLblProduto: TRzLabel;
    TLblMarca: TRzLabel;
    Lbl1: TRzLabel;
    TLblUnidadeMedida: TRzLabel;
    TBtnAdicionarReceita: TRzBitBtn;
    procedure FormCreate(Sender: TObject);
    procedure TEdtIdFuncionarioExit(Sender: TObject);
    procedure TEdtIdProdutoExit(Sender: TObject);
    procedure TBtnAdicionarReceitaClick(Sender: TObject);
    procedure TEdtIdReceitaExit(Sender: TObject);
    procedure TBtnCancelarClick(Sender: TObject);
    procedure TBtnLimparClick(Sender: TObject);
  private
    { Private declarations }
  protected
    { Protected declarations }
      UmaOP:TOrdemProducao;
      UmaCtrlOP:TCtrlOP;
      UmFrmConFuncionario:TFrmConsultarFuncionario;
      UmFrmConReceita:TFrmConsultarReceita;
  public
    { Public declarations }
    procedure ReconhecaObjeto(Aop:TOrdemProducao;ACtrlOP:TCtrlOP);
    procedure limpacampos;
  end;

var
  FrmCadastroOP: TFrmCadastroOP;
  l:integer;

implementation

{$R *.dfm}

procedure TFrmCadastroOP.FormCreate(Sender: TObject);
begin
  inherited;
  Self.TStringGridProdutoReceita.ColCount:=6;
  Self.TStringGridProdutoReceita.Cells[1,0]:='ID PRODUTO';
  Self.TStringGridProdutoReceita.Cells[2,0]:='PRODUTO';
  Self.TStringGridProdutoReceita.Cells[3,0]:='MARCA';
  Self.TStringGridProdutoReceita.Cells[4,0]:='QUANTIDADE';
  Self.TStringGridProdutoReceita.Cells[5,0]:='VALOR UNITARIO';
end;

procedure TFrmCadastroOP.limpacampos;
VAR I:Integer;
begin
    Self.TEdtNumeroOP.Clear;
    Self.TEdtIdReceita.Clear;
    Self.TEdtReceita.Clear;
    Self.TEdtQtdeReceita.Clear;
    Self.TEdtValorTotalOP.Clear;
    Self.TEdtIdFuncionario.Clear;
    Self.TEdtFuncionario.Clear;
    Self.TEdtIdProduto.Clear;
    Self.TEdtProduto.Clear;
    Self.TEdtCustoMtP.Clear;
    Self.TEdtMarca.Clear;
    Self.TedtQtdeProduto.Clear;
    if UmaOP.UmaReceita.UmaListaProduto.Count > 0 then
    begin
       if UmaOP.UmaReceita.QtdeProdutos > 0 then
           for I := 1 to UmaOP.UmaReceita.QtdeProdutos do
           begin
              UmaOP.UmaReceita.Produto:=UmaOP.UmaReceita.getProdutos(i-1);
              UmaOP.UmaReceita.UmaListaProduto.Delete(UmaOP.UmaReceita.UmaListaProduto.Count -1);
              UmaOP.UmaReceita.Produto.Destroy;
           end;

    end;
end;

procedure TFrmCadastroOP.ReconhecaObjeto(Aop: TOrdemProducao; ACtrlOP: TCtrlOP);
begin
    l:=1;
    UmaCtrlOP:=ACtrlOP;
    UmaOP:=Aop;
    UmaOP.UmaListaProduto:=TList.Create;
end;

procedure TFrmCadastroOP.TBtnAdicionarReceitaClick(Sender: TObject);
begin
  inherited;
  if Length(Self.TEdtReceita.Text) > 2 then
  begin
      Self.TEdtIdReceita.Enabled:=False;
      Self.TEdtQtdeReceita.Enabled:=false;
  end;
end;

procedure TFrmCadastroOP.TBtnCancelarClick(Sender: TObject);
begin
  inherited;
  Self.limpacampos;
end;

procedure TFrmCadastroOP.TBtnLimparClick(Sender: TObject);
begin
  inherited;
    Self.limpacampos;
end;

procedure TFrmCadastroOP.TEdtIdFuncionarioExit(Sender: TObject);
var
  UmaCtrlFuncionario:TCtrlFuncionario;
  intValue:integer;
begin
inherited;
    Self.TEdtIdFuncionario.Color:=clWindow;
    if TryStrToInt(Self.TEdtIdFuncionario.Text,IntValue) and (Self.TEdtIdFuncionario.Text <> '') then
     begin
              Self.TEdtFuncionario.Clear;
              UmaCtrlFuncionario:=TCtrlFuncionario.Create;
              UmaOP.UmFuncionario.Id:=intValue;
              if not UmaCtrlFuncionario.Buscar(UmaOP.UmFuncionario.Id,'') then
              begin
                   Self.TEdtIdFuncionario.Clear;
                   Self.TEdtFuncionario.Clear;
                   ShowMessage('REGISTRO NÃO ENCONTRADO.');
              end
              else
              begin
                   UmaCtrlFuncionario.Carregar(UmaOP.UmFuncionario);
                   if UmaOP.UmFuncionario.Nome <> '' then
                   begin
                      Self.TEdtIdFuncionario.Text:= IntToStr(UmaOP.UmFuncionario.Id);
                      Self.TEdtFuncionario.Text:=UmaOP.UmFuncionario.Nome;

                   end
                   else
                   begin
                      Self.TEdtIdFuncionario.Clear;
                      Self.TEdtFuncionario.Clear;
                   end;
              end;
              UmaCtrlFuncionario.Destroy;
     end
     else
     begin
          Self.TEdtIdFuncionario.Clear;
          Self.TEdtFuncionario.Clear;
     end;
end;

procedure TFrmCadastroOP.TEdtIdProdutoExit(Sender: TObject);
var
  UmaCtrlProduto: TCtrlProduto;
  auxInt:integer;
begin
  inherited;
    Self.TEdtIdProduto.Color:=clWindow;
    if TryStrToInt( Self.TEdtIdProduto.Text,auxInt) then
    begin
        Self.TEdtProduto.Clear;
        UmaCtrlProduto := TCtrlProduto.Create;
        UmaOP.UmaReceita.Produto.IdProduto := strToInt(Self.TEdtIdProduto.Text);
        UmaOP.UmaReceita.Produto.Produto := Self.TEdtProduto.Text;
        if not UmaCtrlProduto.Buscar(UmaOP.UmaReceita.Produto.IdProduto, '') then
        begin
          ShowMessage('NENHUM REGISTRO ENCONTADO!');
          Self.TEdtIdProduto.Clear;
          Self.TEdtProduto.Clear;
          Self.TEdtQtdeProduto.Clear;
          Self.TEdtMarca.Clear;
        end
        else
        begin
          UmaCtrlProduto.Carregar(UmaOP.UmaReceita.Produto);
          Self.TEdtIdProduto.Text := IntToStr(UmaOP.UmaReceita.Produto.IdProduto);
          Self.TEdtProduto.Text := UmaOP.UmaReceita.Produto.Produto;
          Self.TEdtMarca.Text := UmaOP.UmaReceita.Produto.Marca;
        end;
        UmaCtrlProduto.Destroy;
     end
    else
    begin
      Self.TEdtIdProduto.Clear;
      Self.TEdtProduto.Clear;
      Self.TEdtMarca.Clear;
      Self.TEdtQtdeProduto.Clear;
    end;


end;

procedure TFrmCadastroOP.TEdtIdReceitaExit(Sender: TObject);
var intValue:integer;
    UmaCtrlReceita:TCtrlReceita;
begin
  inherited;
   Self.TEdtIdReceita.Color:=clWindow;
  if (TryStrToInt(Self.TEdtIdReceita.Text, intValue)) and (Length(Self.TEdtReceita.Text) > 2) then
  begin
      UmaCtrlReceita:=TCtrlReceita.Create;
      UmaOP.UmaReceita.Receita:= Self.TEdtReceita.Text;
      UmaOP.UmaReceita.IdReceita:=intValue;
      if UmaCtrlReceita.Buscar(UmaOP.UmaReceita.IdReceita, UmaOP.UmaReceita.Receita) then
      begin
         UmaCtrlReceita.Carregar(UmaOP.UmaReceita);
         limpacampos;
         Self.TEdtReceita.Text:=UmaOP.UmaReceita.Receita;
         Self.TEdtIdReceita.Text:=IntToStr(UmaOP.UmaReceita.IdReceita);
      end
      else
      begin
         ShowMessage('NENHUM REGISTRO ENCONTRADO');
         Self.TEdtReceita.Clear;
         Self.TEdtIdReceita.Clear;
         Self.TEdtQtdeReceita.Clear;
      end;



  end
  else
  begin
    Self.TEdtIdReceita.Clear;
    Self.TEdtReceita.Clear;
    Self.TEdtQtdeReceita.Clear;
  end;
end;

end.
