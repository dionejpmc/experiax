unit UFrmCadastroEstado;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, UFrmCadastroPai, RzButton, ComCtrls, RzDTP, StdCtrls, RzLabel, Mask,
  RzEdit,UFrmConsultarPais,UEstado,UCtrlEstado,UCtrlPais,UPais;

type
  TFrmCadastroEstado = class(TFormCadastroPai)
    TLblId: TRzLabel;
    TLblEstado: TRzLabel;
    TLblDDD: TRzLabel;
    TLblSigla: TRzLabel;
    TLblPais: TRzLabel;
    TLblIDPais: TRzLabel;
    TEdtIdEstado: TRzEdit;
    TEdtEstado: TRzEdit;
    TEdtDDD: TRzEdit;
    TEdtSigla: TRzEdit;
    TEdtPais: TRzEdit;
    TEdtIdPais: TRzEdit;
    TBtnBuscarPais: TRzBitBtn;
    procedure TBtnBuscarPaisClick(Sender: TObject);
    procedure TBtnSalvarClick(Sender: TObject);
    procedure TEdtIdPaisExit(Sender: TObject);
    procedure TEdtIdEstadoKeyPress(Sender: TObject; var Key: Char);
    procedure TEdtIdPaisKeyPress(Sender: TObject; var Key: Char);
    procedure TEdtDDDKeyPress(Sender: TObject; var Key: Char);
    procedure TEdtSiglaKeyPress(Sender: TObject; var Key: Char);
    procedure TEdtPaisKeyPress(Sender: TObject; var Key: Char);
    procedure TEdtEstadoKeyPress(Sender: TObject; var Key: Char);
    procedure TBtnLimparClick(Sender: TObject);
  private
    { Private declarations }
   // UmFrmCadEstado:TFrmCadastroEstado;
    UmFrmConPais:TFrmConsultarPais;
    UmaCtrlEstado:TCtrlEstado;
    UmEstado:TEstado;
  public
    { Public declarations }
    function ValidaCampos:Boolean;
    function ReconhecaObjeto(OEstado:TEstado;ACtrlEstado:TCtrlEstado):Boolean;
    procedure LimpaCampos;
    procedure Carregar;
  end;

var
  FrmCadastroEstado: TFrmCadastroEstado;

implementation

{$R *.dfm}

procedure TFrmCadastroEstado.Carregar;
begin
     Self.TEdtIdEstado.Text:= IntToStr( UmEstado.IdEstado);
     Self.TEdtEstado.Text:= UmEstado.Estado;
     Self.TEdtSigla.Text:= UmEstado.Sigla;
     Self.TEdtDDD.Text:= UmEstado.DDD;
     self.TEdtIdPais.Text:= IntToStr( UmEstado.Pais.IdPais);
     Self.TEdtPais.Text:=   UmEstado.Pais.Pais;
     Self.TDateTimePickerDataCadastro.DateTime:=StrToDateTime( UmEstado.DataCadastro);
     Self.TDateTimePickerDataAlteracao.DateTime:=StrToDateTime(UmEstado.DataAlteracao);
end;
function TFrmCadastroEstado.ReconhecaObjeto(OEstado: TEstado;
  ACtrlEstado: TCtrlEstado): Boolean;
begin
  UmEstado:=OEstado;
  UmaCtrlEstado:=ACtrlEstado;
  Self.LimpaCampos;
end;

procedure TFrmCadastroEstado.TBtnBuscarPaisClick(Sender: TObject);
begin
  inherited;

    UmFrmConPais:=TFrmConsultarPais.Create(nil);
    UmFrmConPais.ReconhecaObjeto(UmEstado.Pais);
    UmFrmConPais.TBtnCancelar.Caption:='Selecionar';
    UmFrmConPais.ShowModal;
    Self.TEdtIdPais.Text:=IntToStr(UmEstado.Pais.IdPais);
    Self.TEdtPais.Text:=UmEstado.Pais.Pais;
    UmFrmConPais.Free;

end;

procedure TFrmCadastroEstado.TBtnLimparClick(Sender: TObject);
begin
  inherited;
  Self.LimpaCampos;
end;

procedure TFrmCadastroEstado.TBtnSalvarClick(Sender: TObject);
var MSG:String;
begin
  inherited;
   if Self.ValidaCampos = True then
     begin
       //UmEstado.IdEstado:=StrToInt(Self.TEdtIdEstado.Text);
       UmEstado.Estado:=Self.TEdtEstado.Text;
       UmEstado.Sigla:=Self.TEdtSigla.Text;
       UmEstado.DDD:=Self.TEdtDDD.Text;
       UmEstado.Pais.IdPais:=StrToInt( Self.TEdtIdPais.Text);
       UmEstado.Pais.Pais:=Self.TEdtPais.Text;
       MSG:= UmaCtrlEstado.Salvar(UmEstado);
       ShowMessage(MSG);
       Self.LimpaCampos;
       Close;

     end;
end;

procedure TFrmCadastroEstado.TEdtDDDKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
    if not (key in ['0'..'9',#8]) then
       key := #0;
end;

procedure TFrmCadastroEstado.TEdtEstadoKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if not (key in ['A'..'Z','a'..'z',#8,#32,'ç','Ç']) then
     key := #0;
end;

procedure TFrmCadastroEstado.TEdtIdEstadoKeyPress(Sender: TObject;
  var Key: Char);
begin
  inherited;
  if not (key in ['0'..'9',#8]) then
    key := #0;
end;

procedure TFrmCadastroEstado.TEdtIdPaisExit(Sender: TObject);
var UmaCtrlPais :TCtrlPais;
begin
  inherited;
  if Self.TEdtIdPais.Text <> '' then
  begin
     self.TEdtPais.Clear;
     umaCtrlPais := TCtrlPais.Create;
     UmEstado.Pais.IdPais:=StrtoInt(Self.TEdtIdPais.Text);
     UmEstado.Pais.Pais:=self.TEdtPais.Text;
     if not umaCtrlPais.Buscar(UmEstado.Pais.IdPais,Self.TEdtPais.Text) then
      begin
        MessageDlg('Nenhum Registro Encontrado!', mtInformation, [mbOK], 0);
        Self.TEdtIdPais.Clear;
        Self.TEdtPais.Clear;
      end
      else
        begin
            umaCtrlPais.Carregar(UmEstado.Pais);
            self.TEdtIdPais.Text := IntToStr(UmEstado.Pais.IdPais);
            self.TEdtPais.Text := UmEstado.Pais.Pais;
        end;
      end
      else
        begin
          self.TEdtIdPais.Clear;
          Self.TEdtPais.Clear;
        end;
 end;

procedure TFrmCadastroEstado.TEdtIdPaisKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
   if not (key in ['0'..'9',#8]) then
      key := #0;
end;

procedure TFrmCadastroEstado.TEdtPaisKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
   if not (key in ['A'..'Z','a'..'z',#8,#32,'ç','Ç']) then
     key := #0;
end;

procedure TFrmCadastroEstado.TEdtSiglaKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if not (key in ['A'..'Z','a'..'z',#8,#32,'ç','Ç']) then
     key := #0;
end;

procedure TFrmCadastroEstado.LimpaCampos;
begin
  Self.TEdtEstado.Clear;
  Self.TEdtIdEstado.Clear;
  Self.TEdtSigla.Clear;
  self.TEdtPais.Clear;
  Self.TEdtIdPais.Clear;
  Self.TEdtDDD.Clear;

end;
function TFrmCadastroEstado.ValidaCampos: Boolean;
begin
    Result:=True;
end;

end.
