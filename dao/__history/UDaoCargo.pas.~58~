unit UDaoCargo;

interface
uses Udao, UDM, DB, SysUtils, UCargo, Messages;
type
    TDaoCargo = class (TDao)
    private
    protected
    public
      constructor Create;                                            override;
      destructor Destroy;                                            override;
      function Salvar( Objeto : TObject): string;                    override;
      function GetDs : TDataSource;                                  override;
      function Carregar( Objeto: TObject): Tobject;                  override;
      function Buscar(KeyId : Integer;KeyStr:String): boolean;       override;
      function Excluir( Objeto : TObject): string;                   override;


    end;

implementation

{ TDaoCargo }

function TDaoCargo.Buscar(KeyId: Integer; KeyStr: String): boolean;
var TamStr:Integer;
    SQL:String;
begin
   TamStr:=Length(keyStr);
 if (keyId <> 0  ) then
   SQL:='SELECT * FROM CARGO WHERE ID='+Inttostr(keyId)
 else if (TamStr <> 0)  and (keyId = 0) then
   SQL:='SELECT * FROM CARGO WHERE CARGO LIKE'+QuotedStr(KeyStr+'%')
 else if (keyId = 0) and (TamStr = 0) then
   SQL:='SELECT * FROM CARGO ORDER BY CARGO';

    FDM.IBDataSetCargo.Close;
    FDM.IBDataSetCargo.SelectSQL.Clear;
    FDM.IBDataSetCargo.SelectSQL.Add(SQL);
    FDM.IBDataSetCargo.Open;

    if (KeyId =  FDM.IBDataSetCargoID.Value) and (KeyId <> 0) then
        Result:=True
    else
        Result:=False;

end;

function TDaoCargo.Carregar(Objeto: TObject): Tobject;
var UmCargo:TCargo;
begin
     UmCargo:=TCargo(Objeto);
     if not FDM.IBDataSetCargo.Active then
       FDM.IBDataSetCargo.Open;
     UmCargo.IdCargo:=FDM.IBDataSetCargoID.Value;
     UmCargo.Cargo:=FDM.IBDataSetCargoCARGO.Value;
     UmCargo.DataCadastro:=DateTimeToStr(FDM.IBDataSetEstadoDATACADASTRO.Value);
     UmCargo.DataAlteracao:=DateTimeToStr(FDM.IBDataSetEstadoDATAALTERACAO.Value);

     Result:=UmCargo;
end;

constructor TDaoCargo.Create;
begin
  inherited;


end;

destructor TDaoCargo.Destroy;
begin

  inherited;
end;

function TDaoCargo.Excluir(Objeto: TObject): string;
var MSG, SQL:String;
    UmCargo:TCargo;
    IdCargo:Integer;
begin
   UmCargo:=TCargo(Objeto);
   try
   if Self.Buscar(UmCargo.IdCargo,'') then
   begin
       IdCargo:=UmCargo.IdCargo;
       if not (FDM.IBTransaction1.Active) then
       FDM.IBTransaction1.StartTransaction;

       FDM.IBDataSetCargo.Close;
       FDM.IBDataSetCargo.SelectSQL.Text:='SELECT * FROM CARGO WHERE ID = ' + intToStr(IdCargo);
       FDM.IBDataSetCargo.Open;
       FDM.IBDataSetCargo.Delete;
       FDM.IBTransaction1.CommitRetaining;
       FDM.IBDataSetCargo.Close;
       FDM.IBDataSetCargo.SelectSQL.Text:='SELECT * FROM CARGO ORDER BY ID ';
       FDM.IBDataSetCargo.Open;
       MSG:='CARGO EXCLUIDO COM SUCESSO.';
       Result:=MSG;
   end;
   except
      FDM.IBTransaction1.RollbackRetaining;
      MSG:='ERRO AO EXCLUIR CARGO.';
      Result:=MSG;
   end;


end;

function TDaoCargo.GetDs: TDataSource;
begin
    Result:= FDM.TDataSourceCargo;
end;

function TDaoCargo.Salvar(Objeto: TObject): string;
var MSG,SQL:String;
    UmCargo:TCargo;
begin
  UmCargo:=TCargo(Objeto);
  try
     if not FDM.IBTransaction1.Active then
     begin
         FDM.IBTransaction1.Active:=True;
         FDM.IBTransaction1.StartTransaction;
     end;
     if not FDM.IBDataSetCargo.Active then
     begin
        FDM.IBDataSetCargo.Active:=True;
        FDM.IBDataSetCargo.Open;
     end;
     if (UmCargo.IdCargo = 0) or (UmCargo.Cargo = '') then
     begin
         FDM.IBDataSetCargo.Insert;

         FDM.IBDataSetCargoCARGO.Value:=UmCargo.Cargo;
         FDM.IBDataSetCargoDATACADASTRO.Value:= StrToDateTime( UmCargo.DataCadastro);
     end
     else (UmCargo.IdCargo > 0) then
     begin
       FDM.IBDataSetCargo.Close;
       FDM.IBDataSetCargo.SelectSQL.Clear;
       SQL:='SELECT * FROM CARGO WHERE ID='+Inttostr(UmCargo.IdCargo);
       FDM.IBDataSetCargo.SelectSQL.Add(SQL);
       FDM.IBDataSetCargo.Open;

       FDM.IBDataSetCargo.Edit;

       FDM.IBDataSetCargoCARGO.Value:=UmCargo.Cargo;
       FDM.IBDataSetCargoDATAALTERACAO.Value:=StrToDateTime( UmCargo.DataAlteracao);
     end;
     FDM.IBDataSetCargo.Post;

     FDM.IBTransaction1.CommitRetaining;
     MSG:= UmCargo.Cargo+' SALVO COM SUCESSO.';
  except
    FDM.IBTransaction1.RollbackRetaining;
    MSG:=UmCargo.Cargo + ' NÃO PODE SER SALVO.';
  end;
  Result:=MSG;
end;

end.
